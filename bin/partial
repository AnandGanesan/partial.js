#!/usr/bin/env node

var exec = require('child_process').exec
var fs = require('fs');
var path = require('path');
var os = require('os');

var EOF = os.platform() === 'win32' ? '\r\n' : '\n';

function createDirectory(directory) {
	var arr = [];

	arr.push('views');
	arr.push('templates');
	arr.push('controllers');
	arr.push('databases');
	arr.push('backup');
	arr.push('tests');
	arr.push('contents');
	arr.push('public');
	arr.push('logs');
	arr.push('resources');
	arr.push('tmp');
	arr.push('modules');

	arr.forEach(function(o) {
		var dir = path.join(directory, o);
		if (!fs.existsSync(dir))
			fs.mkdirSync(dir);
	});	
};

function createFiles(directory) {
	createFileIndex(directory);
	createFileRun(directory);
	createFileConfig(directory);
	createFileViews(directory);
	createFileResource(directory);
	createFilePublic(directory);
	createFileTest(directory);
	createFileModules(directory);
	createFileController(directory);
}

function createFileIndex(directory) {
	var buffer = [];
	buffer.push("var framework = require('partial.js');");
	buffer.push("var http = require('http');");
	buffer.push("var os = require('os');");
	buffer.push("");
	buffer.push("var index = process.argv.indexOf('backup');");
	buffer.push("if (index !== -1) {");
	buffer.push("	framework.backup(function(err, path) {");
	buffer.push("		console.log('Backup: ' + (err ? err.toString() : path));");
	buffer.push("	});");
	buffer.push("	return;");
	buffer.push("}");
	buffer.push("");
	buffer.push("index = process.argv.indexOf('restore');");
	buffer.push("if (index !== -1) {");
	buffer.push("	var restore = process.argv[index + 1] || '';");
	buffer.push("	framework.restore(restore, function(err, path) {");
	buffer.push("		console.log('Restore: ' + (err ? err.toString() : path));");
	buffer.push("	});");
	buffer.push("	return;");
	buffer.push("}");
	buffer.push("");
	buffer.push("var port = parseInt(process.argv[2] || '8000');");
	buffer.push("var debug = true;");
	buffer.push("");
	buffer.push("framework.run(http, debug, port);");
	buffer.push("");
	buffer.push("// framework.test(true);");
	buffer.push("");
	buffer.push("console.log('http://127.0.0.1:{0}/'.format(port));");
	fs.writeFileSync(path.join(directory, 'index.js'), buffer.join(EOF));
}

function createFileConfig(directory) {
	var buffer = [];

	buffer.push("name				: my web site");
	buffer.push("version			: 1.01");
	buffer.push("secret				: your-secret-key");
	
	fs.writeFileSync(path.join(directory, 'config-release'), buffer.join(EOF));
	fs.writeFileSync(path.join(directory, 'config-debug'), buffer.join(EOF).replace(/true/g, 'false'));
}

function createFileRun(directory) {
	var buffer = [];

	buffer.push('#!/bin/bash');
	buffer.push('');
	buffer.push('DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"');
	buffer.push('');
	buffer.push('PORT="$@"');
	buffer.push('');
	buffer.push('if [ "$PORT" = "" ]; then');
	buffer.push('    PORT="8000"');
	buffer.push('fi');
	buffer.push('');
	buffer.push('open "http://127.0.0.1:$PORT"');
	buffer.push('');
	buffer.push('eval "cd $DIR"');
	buffer.push('eval "supervisor -- index.js $@"');
	
	var fileName = path.join(directory, 'run');

	fs.writeFileSync(fileName, buffer.join(EOF));
	fs.chmodSync(fileName, '555');
}

function createFileViews(directory) {
	var buffer = [];
	var dir = path.join(directory, 'views');

	if (!fs.existsSync(dir))
		fs.mkdirSync(dir);

	fs.writeFileSync(path.join(dir, '403.html'), '@{meta(\'403 - Forbidden\')}\n\n403');
	fs.writeFileSync(path.join(dir, '404.html'), '@{meta(\'404 - Page not found\')}\n\n404');
	fs.writeFileSync(path.join(dir, '431.html'), '@{meta(\'431 - Request header fields too large\')}\n\n431');
	fs.writeFileSync(path.join(dir, '500.html'), '@{meta(\'500 - Internal server error\')}\n\n500');
	fs.writeFileSync(path.join(dir, 'homepage.html'), 'Welcome partial.js developer!');

	buffer.push('<!DOCTYPE html>');
	buffer.push('<html>');
	buffer.push('<head>');
	buffer.push('    @{meta}');
	buffer.push('    <meta charset="utf-8" />');
	buffer.push('    <meta http-equiv="X-UA-Compatible" content="IE=10" />');
	buffer.push('    <meta name="format-detection" content="telephone=no" />');
	buffer.push('    <meta name="viewport" content="width=1024, user-scalable=yes" />');
	buffer.push('    <meta name="robots" content="all,follow" />');
	buffer.push('    @{css(\'default.css\')}');
	buffer.push('    <script type="text/javascript" src="//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js"></script>');
	buffer.push('    @{js(\'default.js\')}');
	buffer.push('    @{favicon(\'favicon.png\')}');
	buffer.push('<head>');
	buffer.push('<body>');
	buffer.push('');
	buffer.push('    @{body}');
	buffer.push('');
	buffer.push('<body>');
	buffer.push('<html>');

	fs.writeFileSync(path.join(dir, '_layout.html'), buffer.join(EOF));
}

function createFileResource(directory) {
	var dir = path.join(directory, 'resources');
	fs.writeFileSync(path.join(dir, 'default.resource'), 'name 			: value' + EOF);
}

function createFilePublic(directory) {
	
	var dir = path.join(directory, 'public');

	var css = path.join(dir, 'css');
	var js = path.join(dir, 'js');
	var img = path.join(dir, 'img');

	if (!fs.existsSync(js))
		fs.mkdirSync(js);

	if (!fs.existsSync(css))
		fs.mkdirSync(css);

	if (!fs.existsSync(img))
		fs.mkdirSync(img);

	var buffer = [];
	buffer.push('User-agent: *');
	buffer.push('Allow: /');
	buffer.push('');

	fs.writeFileSync(path.join(dir, 'robots.txt'), buffer.join(EOF));

	buffer = [];
	buffer.push('@radius(property) { -moz-border-radius:@property; border-radius:@property; -webkit-border-radius:@property }');
	buffer.push('@shadow(property) { -moz-box-shadow:@property; -webkit-box-shadow:@property; box-shadow:@property }');
	buffer.push('@transition(property) { -webkit-transition: @property; -moz-transition: @property; -o-transition: @property; -ms-transition: @property; transition: @property }');
	buffer.push('@transform(property) { -webkit-transform: @property; -moz-transform: @property; -o-transform: @property; -ms-transform: @property; transform: @property }');
	buffer.push('@gradient-linear(property) { background-image: linear-gradient(@property); background-image: -o-linear-gradient(@property); background-image: -moz-linear-gradient(@property); background-image: -webkit-linear-gradient(@property); background-image: -ms-linear-gradient(@property) }');
	buffer.push('@gradient-radial(property) { background-image: radial-gradient(@property); background-image: -o-radial-gradient(@property); background-image: -moz-radial-gradient(@property); background-image: -webkit-radial-gradient(@property); background-image: -ms-radial-gradient(@property) }');
	buffer.push('@noselect { -webkit-user-select:none; -khtml-user-select:none; -moz-user-select:none; -o-user-select:none; user-select:none }');
	buffer.push('');
	buffer.push('body { padding:20px; margin:0; font:normal 12px Arial; color:#505050; }');

	fs.writeFileSync(path.join(css, 'default.css'), buffer.join(EOF));

	buffer = [];
	buffer.push('$(document).ready(function() {');
    buffer.push('');
    buffer.push('});');

	fs.writeFileSync(path.join(js, 'default.js'), buffer.join(EOF));
}

function createFileModules(directory) {

	var dir = path.join(directory, 'modules');

	var buffer = [];
	buffer.push('exports.yourcode = function () {');
	buffer.push('    return \'Hello World\';');
	buffer.push('};');

	fs.writeFileSync(path.join(dir, 'yourcode.js'), buffer.join(EOF));
	
	buffer = [];
	buffer.push('// your custom framework prototypes - https://github.com/petersirka/partial.js/blob/master/empty-project/modules/%23.js');
	buffer.push('// this code it run automatically');
	buffer.push('');
	buffer.push('// exports.onLoaded = function(self) {};');
	buffer.push('// exports.onError = function(err, name, uri) {};');
	buffer.push('// exports.onAuthorize = function(req, res, callback) { callback(false); };');
	buffer.push('// exports.onPrefix = function(req) { return \'\'; };');
	buffer.push('// exports.onVersion = function(name) { return name; };');
	buffer.push('// exports.onRoute = function(req, res) {};');
	buffer.push('// exports.onController = function(name) {};')
	buffer.push('// exports.onSettings = function() { return \'\'; };');
	buffer.push('// exports.onMeta = function onMeta() { return \'\'; };');
	buffer.push('// exports.onValidation = function(name, value) {};');
	fs.writeFileSync(path.join(dir, '#.js'), buffer.join(EOF));
}

function createFileController(directory) {

	var dir = path.join(directory, 'controllers');
	var buffer = [];

	buffer.push('exports.install = function(framework) {');
	buffer.push('    framework.route(\'/\', viewHomepage);');
	buffer.push('    framework.route(\'#403\', error403);');
	buffer.push('    framework.route(\'#404\', error404);');
	buffer.push('    framework.route(\'#431\', error431);');
	buffer.push('    framework.route(\'#500\', error500);');
	buffer.push('};');
	buffer.push('');
	buffer.push('/*');
	buffer.push('exports.models = function() {');
	buffer.push('');
	buffer.push('};');
	buffer.push('*/');
	buffer.push('');
	buffer.push('/*');
	buffer.push('exports.functions = function() {');
	buffer.push('');
	buffer.push('};');
	buffer.push('*/');
	buffer.push('');
	buffer.push('// Forbidden');
	buffer.push('function error403() {');
	buffer.push('    var self = this;');
	buffer.push('    self.statusCode = 403;');
	buffer.push('    self.view(\'403\');');
	buffer.push('}');
	buffer.push('');
	buffer.push('// Not Found');
	buffer.push('function error404() {');
	buffer.push('    var self = this;');
	buffer.push('    self.statusCode = 404;');
	buffer.push('    self.view(\'404\');');
	buffer.push('}');
	buffer.push('');
	buffer.push('// Request Header Fields Too Large');
	buffer.push('function error431() {');
	buffer.push('    var self = this;');
	buffer.push('    self.statusCode = 431;');
	buffer.push('    self.view(\'431\');');
	buffer.push('}');
	buffer.push('');
	buffer.push('// Internal Server Error');
	buffer.push('function error500() {');
	buffer.push('    var self = this;');
	buffer.push('    self.statusCode = 500;');
	buffer.push('    self.view(\'500\');');
	buffer.push('}');
	buffer.push('');
	buffer.push('function viewHomepage() {');
	buffer.push('    var self = this;');
	buffer.push('    self.view(\'homepage\');');
	buffer.push('}');

	fs.writeFileSync(path.join(dir, 'global.js'), buffer.join(EOF));
}

function createFileTest(directory) {
	var dir = path.join(directory, 'tests');
	var buffer = [];

	buffer.push("var assert = require('assert');");
	buffer.push("var utils = require('partial.js/utils');");
	buffer.push("");
	buffer.push("exports.run = function(framework) {");
	buffer.push("");
	buffer.push("    framework.assert('Homepage', '/1/', function response(error, data, name, code, headers) {");
	buffer.push("        assert.ok(code === 200, name);");
	buffer.push("    });");
	buffer.push("");
	buffer.push("};");

	fs.writeFileSync(path.join(dir, 'global.js'), buffer.join(EOF));
}

function install(directory) {
	exec('npm install partial.js', { cwd: directory }, function (error, stdout, stderr) {

	});
}

var dir = process.cwd();
if (process.argv.length === 3)
	dir = process.argv[2];

if (!fs.existsSync(dir)) {
	console.log('partial.js: error / directory not exists');
	return;
}

var files = fs.readdirSync(dir);
if (files.length > 0) {

	var can = true;
	for (var i = 0; i < files.length; i++) {
		var name = files[i];
		if (name[0] === '.')
			continue;
		can = false;
	}

	if (!can) {
		console.log('partial.js: error / directory is not empty');
		return;	
	}
}

console.log('partial.js: creating directories');
createDirectory(dir);

console.log('partial.js: creating files');
createFiles(dir);

console.log('partial.js: install framework');
install(dir);

console.log('partial.js: success');
